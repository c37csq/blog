// .vitepress/config.mts
import { defineConfig } from "file:///D:/projects/vitepress-blog/node_modules/.pnpm/vitepress@1.1.4_@algolia+client-search@4.23.3_@types+node@20.12.7_postcss@8.4.38_search-insights@2.13.0/node_modules/vitepress/dist/node/index.js";

// metadata/index.json
var dailyLearning = [
  {
    title: "\u5224\u65AD\u5BF9\u8C61\u4E2D\u662F\u5426\u5B58\u5728\u67D0\u4E2A\u5C5E\u6027",
    path: "/dailyLearning/hasProperty/index"
  },
  {
    title: "promise\u6784\u9020\u5668\u7684\u5B9E\u73B0",
    path: "/dailyLearning/promise/index"
  },
  {
    title: "\u968F\u673A\u989C\u8272\u51FD\u6570\u7684\u5B9E\u73B0",
    path: "/dailyLearning/random/index"
  },
  {
    title: "\u6587\u672C\u6EA2\u51FA\u95EE\u9898",
    path: "/dailyLearning/textOverflow/index"
  },
  {
    title: "\u6570\u5B57\u8F6C\u4E2D\u6587",
    path: "/dailyLearning/toChineseNumber/index"
  },
  {
    title: "\u4E3A\u4EC0\u4E48\u4E0D\u8BA9\u4F7F\u7528undefined\uFF1F",
    path: "/dailyLearning/undefined/index"
  }
];
var articles = [
  {
    title: "CSS \u5C5E\u6027\u8BA1\u7B97\u8FC7\u7A0B",
    path: "/articles/computedCss/index"
  },
  {
    title: "\u4F60\u4E0D\u77E5\u9053\u7684 CSS \u4E4B\u5305\u542B\u5757",
    path: "/articles/cssContainBlock/index"
  },
  {
    title: "\u4E8B\u4EF6\u5FAA\u73AF",
    path: "/articles/event/index"
  },
  {
    title: "\u6D4F\u89C8\u5668\u6E32\u67D3\u539F\u7406",
    path: "/articles/render/index"
  }
];
var books = [
  {
    title: "\u5185\u89C2\u7ECF",
    path: "/books/NeiGuan/index"
  },
  {
    title: "\u6E05\u51C0\u7ECF",
    path: "/books/QingjingJing/index"
  },
  {
    title: "\u592A\u4E0A\u611F\u5E94\u7BC7",
    path: "/books/TaiShang/index"
  },
  {
    title: "\u592A\u4E59\u91D1\u534E\u5B97\u65E8",
    path: "/books/TaiYiJinHua/index"
  },
  {
    title: "\u9053\u5FB7\u7ECF",
    path: "/books/TaoTeChing/index"
  }
];

// metadata/metadata.ts
var dailyLearningList = dailyLearning;
var articleList = articles;
var bookList = books;

// metadata/scripts/update.ts
import { resolve, join } from "path";
import { readdirSync, readFileSync, statSync, writeFileSync } from "fs";
var __vite_injected_original_dirname = "D:\\projects\\vitepress-blog\\metadata\\scripts";
var DAILY_LEARNING = "dailyLearning";
var ARTICLES_DIR = "articles";
var BOOKS_DIR = "books";
var DIR_DAILY_LEARNING = resolve(__vite_injected_original_dirname, `../../${DAILY_LEARNING}`);
var DIR_ARTICLES = resolve(__vite_injected_original_dirname, `../../${ARTICLES_DIR}`);
var DIR_BOOKS = resolve(__vite_injected_original_dirname, `../../${BOOKS_DIR}`);
var DIR_PACKAGE = resolve(__vite_injected_original_dirname, "..");
function readFile(baseDir) {
  const files = readdirSync(baseDir);
  const fileList = [];
  for (let i = 0; i < files.length; i++) {
    let path = join(baseDir, files[i]);
    let stat = statSync(path);
    if (stat.isFile()) {
      fileList.push(path);
    } else {
      fileList.push(...readFile(path));
    }
  }
  return fileList;
}
function readFileContent(mdFiles, dir) {
  const fileList = [];
  for (let i = 0; i < mdFiles.length; i++) {
    let path = mdFiles[i];
    let content = readFileSync(path, "utf-8");
    const title = /^.*$/m.exec(content)[0].replace("# ", "");
    fileList.push({
      title,
      path: transformPath(path, dir)
    });
  }
  return fileList;
}
function transformPath(path, dir) {
  const index = path.indexOf(dir);
  let result;
  if (index !== -1) {
    result = path.slice(index - 1).replace("index.md", "index");
  } else {
    result = path;
  }
  return result.replace(/\\/g, "/");
}
async function readArticleData() {
  const indexJsonData = {
    dailyLearning: [],
    articles: [],
    books: []
  };
  const dailyLearningFile = readFile(DIR_DAILY_LEARNING);
  const dailyLearningMarkdownFiles = dailyLearningFile.filter((filename) => filename.endsWith(".md"));
  const dailyLearningList2 = readFileContent(dailyLearningMarkdownFiles, DAILY_LEARNING);
  const articlesFile = readFile(DIR_ARTICLES);
  const articlesMarkdownFiles = articlesFile.filter((filename) => filename.endsWith(".md"));
  const articlesList = readFileContent(articlesMarkdownFiles, ARTICLES_DIR);
  const booksFile = readFile(DIR_BOOKS);
  const booksMarkdownFiles = booksFile.filter((filename) => filename.endsWith(".md"));
  const booksList = readFileContent(booksMarkdownFiles, BOOKS_DIR);
  indexJsonData.dailyLearning = dailyLearningList2;
  indexJsonData.articles = articlesList;
  indexJsonData.books = booksList;
  return indexJsonData;
}
async function run() {
  const indexes = await readArticleData();
  writeFileSync(join(DIR_PACKAGE, "index.json"), JSON.stringify(indexes, null, 2));
}
run();

// .vitepress/config.mts
var DailyLearning = dailyLearningList.map((v) => ({
  text: v.title,
  link: v.path
}));
var Articles = articleList.map((v) => ({
  text: v.title,
  link: v.path
}));
var Books = bookList.map((v) => ({
  text: v.title,
  link: v.path
}));
var DailyLearningSideBar = [
  {
    text: "\u6BCF\u65E5\u4E00\u5B66",
    items: DailyLearning
  }
];
var ArticlesSideBar = [
  {
    text: "\u6587\u7AE0",
    items: Articles
  }
];
var BooksSideBar = [
  {
    text: "\u4E66\u7C4D",
    items: Books
  }
];
var config_default = defineConfig({
  base: "/blog/",
  title: "\u9648\u5927\u601D\u535A\u5BA2",
  // 网站标题
  description: "\u9648\u5927\u601D\u7684\u535A\u5BA2",
  // 网站描述
  themeConfig: {
    // 主题配置
    search: {
      provider: "local"
    },
    footer: {
      copyright: "\u9648\u5927\u601D\u7248\u6743\u6240\u6709 Copyright \xA9 2024 \u521B\u4F5C\u4E0D\u6613\u8BF7\u5C0A\u91CD\u4ED6\u4EBA\u52B3\u52A8\u6210\u679C\uFF0C\u672A\u7ECF\u5141\u8BB8\u7981\u6B62\u8F6C\u8F7D"
    },
    // https://vitepress.dev/reference/default-theme-config
    nav: [
      // 导航栏的配置
      { text: "\u9996\u9875", link: "/" },
      { text: "\u6BCF\u65E5\u4E00\u5B66", link: DailyLearning[0].link, activeMatch: `/${DAILY_LEARNING}/` },
      { text: "\u6587\u7AE0", link: Articles[0].link, activeMatch: `/${ARTICLES_DIR}/` }
    ],
    sidebar: {
      // 侧边栏配置
      "/dailyLearning/": DailyLearningSideBar,
      "/articles/": ArticlesSideBar,
      "/books/": BooksSideBar
    },
    socialLinks: [
      // 友链的配置，也可以叫做社交链接
      { icon: "github", link: "https://github.com/c37csq" }
    ]
  }
});
export {
  config_default as default
};
//# sourceMappingURL=data:application/json;base64,
